name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name'
        required: false
        default: 'Manual Release'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 23
      uses: actions/setup-java@v3
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Get Project Version
      id: get_version
      run: |
        VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
        echo "Project version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build with Gradle
      run: ./gradlew build

    - name: List all JAR files
      run: find . -name "*.jar" -type f -not -path "*/build/tmp/*" -not -path "*/run/*"

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          common/build/libs/*.jar
          plugin/build/libs/*.jar
          postgres/build/libs/*.jar
          s3/build/libs/*.jar

    - name: Set Release Name
      id: set_release_name
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "release_name=${{ github.event.inputs.release_name }} (v${{ steps.get_version.outputs.version }})" >> $GITHUB_OUTPUT
        else
          echo "release_name=Release ${{ github.ref_name }} (v${{ steps.get_version.outputs.version }})" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ steps.set_release_name.outputs.release_name }}
        draft: false
        prerelease: false
        files: |
          common/build/libs/*.jar
          plugin/build/libs/*.jar
          postgres/build/libs/*.jar
          s3/build/libs/*.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
