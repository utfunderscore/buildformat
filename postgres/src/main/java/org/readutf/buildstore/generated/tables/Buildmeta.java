/*
 * This file is generated by jOOQ.
 */
package org.readutf.buildstore.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.readutf.buildstore.generated.Indexes;
import org.readutf.buildstore.generated.Keys;
import org.readutf.buildstore.generated.Public;
import org.readutf.buildstore.generated.tables.BuildmetaFormat.BuildmetaFormatPath;
import org.readutf.buildstore.generated.tables.BuildmetaTags.BuildmetaTagsPath;
import org.readutf.buildstore.generated.tables.records.BuildmetaRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Buildmeta extends TableImpl<BuildmetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.buildmeta</code>
     */
    public static final Buildmeta BUILDMETA = new Buildmeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildmetaRecord> getRecordType() {
        return BuildmetaRecord.class;
    }

    /**
     * The column <code>public.buildmeta.id</code>.
     */
    public final TableField<BuildmetaRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.buildmeta.name</code>.
     */
    public final TableField<BuildmetaRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.buildmeta.description</code>.
     */
    public final TableField<BuildmetaRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Buildmeta(Name alias, Table<BuildmetaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Buildmeta(Name alias, Table<BuildmetaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.buildmeta</code> table reference
     */
    public Buildmeta(String alias) {
        this(DSL.name(alias), BUILDMETA);
    }

    /**
     * Create an aliased <code>public.buildmeta</code> table reference
     */
    public Buildmeta(Name alias) {
        this(alias, BUILDMETA);
    }

    /**
     * Create a <code>public.buildmeta</code> table reference
     */
    public Buildmeta() {
        this(DSL.name("buildmeta"), null);
    }

    public <O extends Record> Buildmeta(Table<O> path, ForeignKey<O, BuildmetaRecord> childPath, InverseForeignKey<O, BuildmetaRecord> parentPath) {
        super(path, childPath, parentPath, BUILDMETA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BuildmetaPath extends Buildmeta implements Path<BuildmetaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BuildmetaPath(Table<O> path, ForeignKey<O, BuildmetaRecord> childPath, InverseForeignKey<O, BuildmetaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BuildmetaPath(Name alias, Table<BuildmetaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BuildmetaPath as(String alias) {
            return new BuildmetaPath(DSL.name(alias), this);
        }

        @Override
        public BuildmetaPath as(Name alias) {
            return new BuildmetaPath(alias, this);
        }

        @Override
        public BuildmetaPath as(Table<?> alias) {
            return new BuildmetaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UK_BUILD_META_NAME);
    }

    @Override
    public Identity<BuildmetaRecord, Integer> getIdentity() {
        return (Identity<BuildmetaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BuildmetaRecord> getPrimaryKey() {
        return Keys.BUILDMETA_PKEY;
    }

    private transient BuildmetaFormatPath _buildmetaFormat;

    /**
     * Get the implicit to-many join path to the
     * <code>public.buildmeta_format</code> table
     */
    public BuildmetaFormatPath buildmetaFormat() {
        if (_buildmetaFormat == null)
            _buildmetaFormat = new BuildmetaFormatPath(this, null, Keys.BUILDMETA_FORMAT__BUILDMETA_FORMAT_BUILDMETA_ID_FKEY.getInverseKey());

        return _buildmetaFormat;
    }

    private transient BuildmetaTagsPath _buildmetaTags;

    /**
     * Get the implicit to-many join path to the
     * <code>public.buildmeta_tags</code> table
     */
    public BuildmetaTagsPath buildmetaTags() {
        if (_buildmetaTags == null)
            _buildmetaTags = new BuildmetaTagsPath(this, null, Keys.BUILDMETA_TAGS__BUILDMETA_TAGS_BUILDMETA_ID_FKEY.getInverseKey());

        return _buildmetaTags;
    }

    @Override
    public Buildmeta as(String alias) {
        return new Buildmeta(DSL.name(alias), this);
    }

    @Override
    public Buildmeta as(Name alias) {
        return new Buildmeta(alias, this);
    }

    @Override
    public Buildmeta as(Table<?> alias) {
        return new Buildmeta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Buildmeta rename(String name) {
        return new Buildmeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Buildmeta rename(Name name) {
        return new Buildmeta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Buildmeta rename(Table<?> name) {
        return new Buildmeta(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Buildmeta where(Condition condition) {
        return new Buildmeta(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Buildmeta where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Buildmeta where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Buildmeta where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Buildmeta where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Buildmeta where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Buildmeta where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Buildmeta where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Buildmeta whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Buildmeta whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
